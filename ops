#!/usr/bin/env python3

#----------------------------------------------------------------------------
# MIT License
# 
# Copyright (c) 2020 Forte Labs Inc.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#----------------------------------------------------------------------------

#----------------------------------------------------------------------------
# Deployment system for the Ethermint testing environment.
#
# This tool is used as a helper method for working in ethermint and will
# allow for a repeatable process instead of having to remember all the direct
# commands
#----------------------------------------------------------------------------

#----------------------------------------------------------------------------
# Imported Libraries
#----------------------------------------------------------------------------
import sys
import argparse
import os
import subprocess

#----------------------------------------------------------------------------
# Setup Commandline Processing
#----------------------------------------------------------------------------
parser = argparse.ArgumentParser('Ethermint Testing Environment Tool')

# Because I am bad at remembers stuff, lets throw a "tips" block in
parser.add_argument('--tips',
                    help='Tips and examples of executing some common ops',
                    action="store_true")

parser.add_argument('--verbose',
                    help='Runs the Ansible Commands in Full Verbose mode.  Helpful for debugging ansible playbooks but not much else.',
                    action="store_true")

parser.add_argument('--ansible_root',
                    help='Set the path for the ansible playbooks. Useful for system development.  Default is ./ansible',
                    action="store")

parser.add_argument('--setup_local',
                    help='Installs any additional Ansible packages needed.',
                    action="store_true")

parser.add_argument('--build_images',
                    help='Build all local images',
                    action="store_true")

parser.add_argument('--start_env_local',
                    help='Start up a local application development environment.',
                    action="store_true")

parser.add_argument('--stop_env_local',
                    help='Stop a local application development environment.',
                    action="store_true")

parser.add_argument('--app_dev',
                    help='Compile the Application code on the host machine',
                    action="store_true")

parser.add_argument('--app_run',
                    help='Compile the Application code on the host machine',
                    action="store_true")

parser.add_argument('--bot_dev',
                    help='Compile the Bot code on the host machine',
                    action="store_true")

parser.add_argument('--bot_run',
                    help='Compile the Bot code on the host machine',
                    action="store_true")

parser.add_argument('--clean_builds',
                    help='Cleans up any build files, etc',
                    action="store_true")

parser.add_argument('--unit_test_dev',
                    help='Runs the unit tests using the host machine build and docker images of backend services (ethermint)',
                    action="store_true")

parser.add_argument('--user_test_dev',
                    help='Runs the user tests using the docker image of the app server but the local build of the bot testing framework',
                    action="store_true")

parser.add_argument('--unit_test_local',
                    help='Runs the unit tests using the docker built app and docker images of backend services (ethermint)',
                    action="store_true")

parser.add_argument('--user_test_local',
                    help='Runs the user tests using the docker image of the app server and bot testing framework',
                    action="store_true")

parser.add_argument('--publish',
                    help='Publish up all the images to a cloud Image register based on config file passed in',
                    action="store")

parser.add_argument('--list',
                    help='List all deployments the account has access to',
                    action="store")

parser.add_argument('--deploy',
                    help='Deploys a build up to the cloud',
                    action="store")

parser.add_argument('--validate',
                    help='Validates a deployment works, etc',
                    action="store")

parser.add_argument('--update',
                    help='updates the configuration of a deployment',
                    action="store")

parser.add_argument('--release',
                    help='releases a deployment',
                    action="store")

parser.add_argument('--dev',
                    help='Testing scripts or stuff in development',
                    action="store_true")

#----------------------------------------------------------------------------
# Parse the Commandline Arguments
#----------------------------------------------------------------------------
args = parser.parse_args()

#----------------------------------------------------------------------------
# Load some default arguments
#----------------------------------------------------------------------------
ansible_root = "./devops"

if(None != args.ansible_root):
    ansible_root = args.ansible_root

verboseOpts = ''
if(args.verbose):
    verboseOpts = '-vvvv'

#----------------------------------------------------------------------------
# --tips Handler
#----------------------------------------------------------------------------
if args.tips:
    print("""
Ethermint Testing Environment Tool

This tool was built to help me automate some of the common actions
needed to execute this testing environment.  The motivation for this
is 3 fold:

* I forget stuff and while Runbooks are nice, writing them in development 
  sucks
* Sometimes one action takes multiple commandline steps and I am lazy
* Running multiple commands is error prone so why risk screwing it up 

Containers:

Everything I am doing here is done via containers.  This is so I can 
reproduce environments without having to have a bunch of stuff installed 
locally and can create clean room environments if needed.

-- build_local --------------------------------------------------------------

This will build all the containers required for this system to run

./ops --build_local

""")

#----------------------------------------------------------------------------
# --setup_local
#----------------------------------------------------------------------------
elif args.setup_local:
    print("Installing all packages needed by ansible (typically via pip3)")
    os.system('pip install --user ansible')
    cmd = '~/.local/bin/ansible-playbook -i {0}/inventory/hosts {0}/playbooks/commands/local_env.yml {1}'
    os.system(cmd.format(ansible_root, verboseOpts))
    print("setup_local complete.  Please make sure to add ~/.local/bin to your path or future commands will fail")
    print("Also given the order of ops you may see some failures.  Try running command a second time and report back if failures persist")

#----------------------------------------------------------------------------
# --build_images Handler
#----------------------------------------------------------------------------
elif args.build_images:
    print("Building the all the docker containers needed")
    cmd = 'ansible-playbook -i {0}/inventory/hosts {0}/playbooks/commands/build_images.yml {1}'
    os.system(cmd.format(ansible_root, verboseOpts))
    print("Build Local Containers Completed!!")

#----------------------------------------------------------------------------
# --env_local Handler
#----------------------------------------------------------------------------
elif args.start_env_local:
    print("Starting the local dev environment")
    cmd = 'ansible-playbook -i {0}/inventory/hosts {0}/playbooks/commands/local_dev.yml --extra-vars "env_state=start" {1}'
    os.system(cmd.format(ansible_root, verboseOpts))
    # Now lets run the migrate script
    cmd = 'cd src/proto_app/apps/storage && ./setup.sh'
    os.system(cmd)
    print("Starting local environment Completed!!")

#----------------------------------------------------------------------------
# --env_local Handler
#----------------------------------------------------------------------------
elif args.stop_env_local:
    print("Stopping local dev environment")
    cmd = 'ansible-playbook -i {0}/inventory/hosts {0}/playbooks/commands/local_dev.yml --extra-vars "env_state=stop" {1}'
    os.system(cmd.format(ansible_root, verboseOpts))
    print("Stopping local environment Completed!!")

#----------------------------------------------------------------------------
# --app_dev Handler
#----------------------------------------------------------------------------
elif args.app_dev:
    print("Building the application for local dev")
    cmd = 'cd src/proto_app && MIX_ENV=prod mix release marketplace --path ../marketplace'
    os.system(cmd)
    print("Build Application Completed!!")

#----------------------------------------------------------------------------
# --bot_dev Handler
#----------------------------------------------------------------------------
elif args.bot_dev:
    print("Building the bot for local dev")
    cmd = 'cd src/proto_app && MIX_ENV=prod mix release bot --path ../bot'
    os.system(cmd)
    print("Build Application Completed!!")

#----------------------------------------------------------------------------
# --app_run Handler
#----------------------------------------------------------------------------
elif args.app_run:
    print("Run the application for local dev")
    cmd = './src/marketplace/bin/marketplace start_iex'
    os.system(cmd)
    print("Done!!")

#----------------------------------------------------------------------------
# --bot_run Handler
#----------------------------------------------------------------------------
elif args.bot_run:
    print("Run the bot for local dev")
    cmd = './src/bot/bin/bot start_iex'
    os.system(cmd)
    print("Done!!")

#----------------------------------------------------------------------------
# --unit_test_dev Handler
#----------------------------------------------------------------------------
elif args.unit_test_dev:
    print("NOT IMPLEMENTED")

#----------------------------------------------------------------------------
# --user_test_dev Handler
#----------------------------------------------------------------------------
elif args.user_test_dev:
    print("NOT IMPLEMENTED")

#----------------------------------------------------------------------------
# --unit_test_local Handler
#----------------------------------------------------------------------------
elif args.unit_test_local:
    print("NOT IMPLEMENTED")

#----------------------------------------------------------------------------
# --user_test_local Handler
#----------------------------------------------------------------------------
elif args.user_test_local:
    print("NOT IMPLEMENTED")

#----------------------------------------------------------------------------
# --clean Handler
#----------------------------------------------------------------------------
elif args.clean_builds:
    print("Clean up any local files")
    cmd = 'ansible-playbook -i {0}/inventory/hosts {0}/playbooks/commands/clean_builds.yml {1}'
    os.system(cmd.format(ansible_root, verboseOpts))
    print("Build Application Containers Completed!!")


#----------------------------------------------------------------------------
# --dev Handler
#----------------------------------------------------------------------------
elif args.dev:
    print("Running Dev Commands")
    cmd = 'ansible-playbook -i {0}/inventory/hosts {0}/playbooks/commands/dev.yml {1}'
    os.system(cmd.format(ansible_root, verboseOpts))
    print("Publish images Completed!!")

#----------------------------------------------------------------------------
# --publish Handler
#----------------------------------------------------------------------------
elif None != args.publish:
    print("Publish images to Google Registry")
    cmd = 'ansible-playbook -i {0}/inventory/hosts {0}/playbooks/commands/publish.yml {1}'
    os.system(cmd.format(ansible_root, verboseOpts))
    print("Publish images Completed!!")

#----------------------------------------------------------------------------
# --list Handler
#----------------------------------------------------------------------------
elif None != args.list:
    print("NOT IMPLEMENTED")

#----------------------------------------------------------------------------
# --deploy Handler
#----------------------------------------------------------------------------
elif None != args.deploy:
    print("Deploying the Cluster")
    cmd = 'ansible-playbook -i {0}/inventory/hosts {0}/playbooks/commands/deploy.yml {1} --extra-vars "cluster_state=present"'
    os.system(cmd.format(ansible_root, verboseOpts))
    print("Deploy Cluster Completed!!")

#----------------------------------------------------------------------------
# --validate Handler
#----------------------------------------------------------------------------
elif None != args.validate:
    print("NOT IMPLEMENTED")

#----------------------------------------------------------------------------
# --update Handler
#----------------------------------------------------------------------------
elif None != args.update:
    print("NOT IMPLEMENTED")

#----------------------------------------------------------------------------
# --release Handler
#----------------------------------------------------------------------------
elif None != args.release:
    print("Release the Cluster")
    cmd = 'ansible-playbook -i {0}/inventory/hosts {0}/playbooks/commands/deploy.yml {1} --extra-vars "cluster_state=absent"'
    os.system(cmd.format(ansible_root, verboseOpts))
    print("Release of the Cluster Completed!!")

#----------------------------------------------------------------------------
# Unknown Operation
#----------------------------------------------------------------------------
else:
    print("Unknown Command")